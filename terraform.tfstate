{
  "version": 4,
  "terraform_version": "0.14.7",
  "serial": 10,
  "lineage": "188d936c-5c36-3af5-c42b-762b6e863733",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "puppet-master",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20210211",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/winternetuk/zones/europe-west3-a/disks/puppet-master"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/winternetuk/zones/europe-west3-a/instances/puppet-master",
            "instance_id": "6256277510919263023",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-medium",
            "metadata": {
              "startup-script": "#! /bin/bash\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Standard library of functions useful for startup scripts.\n\n# These are outside init_global_vars so logging functions work with the most\n# basic case of `source startup-script-stdlib.sh`\nreadonly SYSLOG_DEBUG_PRIORITY=\"${SYSLOG_DEBUG_PRIORITY:-syslog.debug}\"\nreadonly SYSLOG_INFO_PRIORITY=\"${SYSLOG_INFO_PRIORITY:-syslog.info}\"\nreadonly SYSLOG_ERROR_PRIORITY=\"${SYSLOG_ERROR_PRIORITY:-syslog.error}\"\n# Global counter of how many times stdlib::init() has been called.\nSTARTUP_SCRIPT_STDLIB_INITIALIZED=0\n\n# Error codes\nreadonly E_RUN_OR_DIE=5\nreadonly E_MISSING_MANDATORY_ARG=9\nreadonly E_UNKNOWN_ARG=10\n\nstdlib::debug() {\n  [[ -z \"${DEBUG:-}\" ]] \u0026\u0026 return 0\n  local ds msg\n  msg=\"$*\"\n  logger -p \"${SYSLOG_DEBUG_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  [[ -n \"${QUIET:-}\" ]] \u0026\u0026 return 0\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  echo -e \"${BLUE}${ds}Debug [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\nstdlib::info() {\n  local ds msg\n  msg=\"$*\"\n  logger -p \"${SYSLOG_INFO_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  [[ -n \"${QUIET:-}\" ]] \u0026\u0026 return 0\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  echo -e \"${GREEN}${ds}Info [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\nstdlib::error() {\n  local ds msg\n  msg=\"$*\"\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  logger -p \"${SYSLOG_ERROR_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  echo -e \"${RED}${ds}Error [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\n# The main initialization function of this library.  This should be kept to the\n# minimum amount of work required for all functions to operate cleanly.\nstdlib::init() {\n  if [[ ${STARTUP_SCRIPT_STDLIB_INITIALIZED} -gt 0 ]]; then\n    stdlib::info 'stdlib::init()'\" already initialized, no action taken.\"\n    return 0\n  fi\n  ((STARTUP_SCRIPT_STDLIB_INITIALIZED++)) || true\n  stdlib::init_global_vars\n  stdlib::init_directories\n  stdlib::debug \"stdlib::init(): startup-script-stdlib.sh initialized and ready\"\n}\n\n# Transfer control to startup-startup-script-custom.  The script is sourced to\n# ensure all functions are exposed and the trap handlers configured here are\n# fired on exit.  A local file path or http URL are both supported.\nstdlib::run_startup_script_custom() {\n  local script_file key\n  local exit_code\n  # shellcheck disable=SC2119\n  script_file=\"$(stdlib::mktemp)\"\n  key=\"instance/attributes/startup-script-custom\"\n\n  if ! stdlib::metadata_get -k \"${key}\" -o \"${script_file}\"; then\n    stdlib::error \"Could not fetch custom startup script.\" \\\n      \"Make sure ${key} exists.\"\n    return 1\n  fi\n\n  stdlib::debug \"=== BEGIN ${key} ===\"\n  # shellcheck source=/dev/null\n  source \"${script_file}\"\n  exit_code=$?\n  stdlib::debug \"=== END ${key} exit_code=${exit_code} ===\"\n  return $exit_code\n}\n\n# Initialize global variables.\nstdlib::init_global_vars() {\n  # The program name, used for logging.\n  readonly PROG=\"${PROG:-startup-script-stdlib}\"\n  # Date format used for stderr logging.  Passed to date + command.\n  readonly DATE_FMT=\"${DATE_FMT:-\"%a %b %d %H:%M:%S %z %Y\"}\"\n  # var directory\n  readonly VARDIR=\"${VARDIR:-/var/lib/startup}\"\n  # Override this with file://localhost/tmp/foo/bar in spec test context\n  readonly METADATA_BASE=\"${METADATA_BASE:-http://metadata.google.internal}\"\n\n  # Color variables\n  if [[ -n \"${COLOR:-}\" ]]; then\n    readonly NC='\\033[0m'        # no color\n    readonly RED='\\033[0;31m'    # error\n    readonly GREEN='\\033[0;32m'  # info\n    readonly BLUE='\\033[0;34m'   # debug\n  else\n    readonly NC=''\n    readonly RED=''\n    readonly GREEN=''\n    readonly BLUE=''\n  fi\n\n  return 0\n}\n\nstdlib::init_directories() {\n  if ! [[ -e \"${VARDIR}\" ]]; then\n    install -d -m 0755 -o 0 -g 0 \"${VARDIR}\"\n  fi\n}\n\n##\n# Get a metadata key.  When used without -o, this function is guaranteed to\n# produce no output on STDOUT other than the retrieved value.  This is intended\n# to support the use case of\n# FOO=\"$(stdlib::metadata_get -k instance/attributes/foo)\"\n#\n# If the requested key does not exist, the error code will be 22 and zero bytes\n# written to STDOUT.\nstdlib::metadata_get() {\n  local OPTIND opt key outfile\n  local metadata=\"${METADATA_BASE%/}/computeMetadata/v1\"\n  local exit_code\n  while getopts \":k:o:\" opt; do\n    case \"${opt}\" in\n    k) key=\"${OPTARG}\" ;;\n    o) outfile=\"${OPTARG}\" ;;\n    :)\n      stdlib::error \"Invalid option: -${OPTARG} requires an argument\"\n      stdlib::metadata_get_usage\n      return \"${E_MISSING_MANDATORY_ARG}\"\n      ;;\n    *)\n      stdlib::error \"Unknown option: -${opt}\"\n      stdlib::metadata_get_usage\n      return \"${E_UNKNOWN_ARG}\"\n      ;;\n    esac\n  done\n  local url=\"${metadata}/${key#/}\"\n\n  stdlib::debug \"Getting metadata resource url=${url}\"\n  if [[ -z \"${outfile:-}\" ]]; then\n    curl --location --silent --connect-timeout 1 --fail \\\n      -H 'Metadata-Flavor: Google' \"$url\" 2\u003e/dev/null\n    exit_code=$?\n  else\n    stdlib::cmd curl --location \\\n      --silent \\\n      --connect-timeout 1 \\\n      --fail \\\n      --output \"${outfile}\" \\\n      -H 'Metadata-Flavor: Google' \\\n      \"$url\"\n    exit_code=$?\n  fi\n  case \"${exit_code}\" in\n    22 | 37)\n      stdlib::debug \"curl exit_code=${exit_code} for url=${url}\" \\\n        \"(Does not exist)\"\n      ;;\n  esac\n  return \"${exit_code}\"\n}\n\nstdlib::metadata_get_usage() {\n  stdlib::info 'Usage: stdlib::metadata_get -k \u003ckey\u003e'\n  stdlib::info 'For example: stdlib::metadata_get -k instance/attributes/startup-config'\n}\n\n# Load configuration values in the spirit of /etc/sysconfig defaults, but from\n# metadata instead of the filesystem.\nstdlib::load_config_values() {\n  local config_file\n  local key=\"instance/attributes/startup-script-config\"\n  # shellcheck disable=SC2119\n  config_file=\"$(stdlib::mktemp)\"\n  stdlib::metadata_get -k \"${key}\" -o \"${config_file}\"\n  local status=$?\n  case \"$status\" in\n    0)\n      stdlib::debug \"SUCCESS: Configuration data sourced from $key\"\n      ;;\n    22 | 37)\n      stdlib::debug \"no configuration data loaded from $key\"\n      ;;\n    *)\n      stdlib::error \"metadata_get -k $key returned unknown status=${status}\"\n      ;;\n  esac\n  # shellcheck source=/dev/null\n  source \"${config_file}\"\n}\n\n# Run a command logging the entry and exit.  Intended for system level commands\n# and operational debugging.  Not intended for use with redirection.  This is\n# not named run() because bats uses a run() function.\nstdlib::cmd() {\n  local exit_code argv=(\"$@\")\n  stdlib::debug \"BEGIN: stdlib::cmd() command=[${argv[*]}]\"\n  \"${argv[@]}\"\n  exit_code=$?\n  stdlib::debug \"END: stdlib::cmd() command=[${argv[*]}] exit_code=${exit_code}\"\n  return $exit_code\n}\n\n# Run a command successfully or exit the program with an error.\nstdlib::run_or_die() {\n  if ! stdlib::cmd \"$@\"; then\n    stdlib::error \"stdlib::run_or_die(): exiting with exit code ${E_RUN_OR_DIE}.\"\n    exit \"${E_RUN_OR_DIE}\"\n  fi\n}\n\n# Intended to take advantage of automatic cleanup of startup script library\n# temporary files without exporting a modified TMPDIR to child processes, which\n# would cause the children to have their TMPDIR deleted out from under them.\n# shellcheck disable=SC2120\nstdlib::mktemp() {\n  TMPDIR=\"${DELETE_AT_EXIT:-${TMPDIR}}\" mktemp \"$@\"\n}\n\n# Return a nice error message if a mandatory argument is missing.\nstdlib::mandatory_argument() {\n  local OPTIND opt name flag\n  while getopts \":n:f:\" opt; do\n    case \"$opt\" in\n    n) name=\"${OPTARG}\" ;;\n    f) flag=\"${OPTARG}\" ;;\n    :)\n      stdlib::error \"Invalid argument: -${OPTARG} requires an argument to stdlib::mandatory_argument()\"\n      return \"${E_MISSING_MANDATORY_ARG}\"\n      ;;\n    *)\n      stdlib::error \"Unknown argument: -${OPTARG}\"\n      stdlib::info \"Usage: stdlib::mandatory_argument -n \u003cname\u003e -f \u003cflag\u003e\"\n      return \"${E_UNKNOWN_ARG}\"\n      ;;\n    esac\n  done\n  stdlib::error \"Invalid argument: -${flag} requires an argument to ${name}().\"\n}\n#! /bin/bash\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nstdlib::main() {\n  DELETE_AT_EXIT=\"$(mktemp -d)\"\n  readonly DELETE_AT_EXIT\n\n  # Initialize state required by other functions, e.g. debug()\n  stdlib::init\n  stdlib::debug \"Loaded startup-script-stdlib as an executable.\"\n\n  stdlib::load_config_values\n\n  stdlib::run_startup_script_custom\n}\n\n# if script is being executed and not sourced.\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n  stdlib::finish() {\n    [[ -d \"${DELETE_AT_EXIT:-}\" ]] \u0026\u0026 rm -rf \"${DELETE_AT_EXIT}\"\n  }\n  trap stdlib::finish EXIT\n\n  stdlib::main \"$@\"\nfi\n",
              "startup-script-custom": "#!/bin/bash\n#download puppet release\nsudo wget https://apt.puppet.com/puppet-release-bionic.deb -P /etc\n\n#add with dpkg\nsudo dpkg -i /etc/puppet-release-bionic.deb\n\n#update\nsudo apt-get update\n\n#install puppet master\nsudo apt-get install -y puppetserver\n\n#add with dpkg\nsudo dpkg -i /etc/puppet-release-bionic.deb\n\n#install puppet master\nsudo apt-get install -y puppetserver\n\necho \"*****   Installation Complteted!!   *****\"\n\necho \"Welcome to Google Compute VM Instance deployed using Terraform!!!\"\n\necho \"*****   Startup script completes!!    *****\""
            },
            "metadata_fingerprint": "bI4UmVIs0fw=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "puppet-master",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.242.209.169",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/winternetuk/global/networks/default",
                "network_ip": "10.156.0.40",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/winternetuk/regions/europe-west3/subnetworks/default",
                "subnetwork_project": "winternetuk"
              }
            ],
            "project": "winternetuk",
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/winternetuk/zones/europe-west3-a/instances/puppet-master",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-west3-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "puppet-slave",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20210211",
                    "labels": {},
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/winternetuk/zones/europe-west3-a/disks/puppet-slave"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/winternetuk/zones/europe-west3-a/instances/puppet-slave",
            "instance_id": "2187734529917817647",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-medium",
            "metadata": {
              "startup-script": "#! /bin/bash\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Standard library of functions useful for startup scripts.\n\n# These are outside init_global_vars so logging functions work with the most\n# basic case of `source startup-script-stdlib.sh`\nreadonly SYSLOG_DEBUG_PRIORITY=\"${SYSLOG_DEBUG_PRIORITY:-syslog.debug}\"\nreadonly SYSLOG_INFO_PRIORITY=\"${SYSLOG_INFO_PRIORITY:-syslog.info}\"\nreadonly SYSLOG_ERROR_PRIORITY=\"${SYSLOG_ERROR_PRIORITY:-syslog.error}\"\n# Global counter of how many times stdlib::init() has been called.\nSTARTUP_SCRIPT_STDLIB_INITIALIZED=0\n\n# Error codes\nreadonly E_RUN_OR_DIE=5\nreadonly E_MISSING_MANDATORY_ARG=9\nreadonly E_UNKNOWN_ARG=10\n\nstdlib::debug() {\n  [[ -z \"${DEBUG:-}\" ]] \u0026\u0026 return 0\n  local ds msg\n  msg=\"$*\"\n  logger -p \"${SYSLOG_DEBUG_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  [[ -n \"${QUIET:-}\" ]] \u0026\u0026 return 0\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  echo -e \"${BLUE}${ds}Debug [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\nstdlib::info() {\n  local ds msg\n  msg=\"$*\"\n  logger -p \"${SYSLOG_INFO_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  [[ -n \"${QUIET:-}\" ]] \u0026\u0026 return 0\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  echo -e \"${GREEN}${ds}Info [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\nstdlib::error() {\n  local ds msg\n  msg=\"$*\"\n  ds=\"$(date +\"${DATE_FMT}\") \"\n  logger -p \"${SYSLOG_ERROR_PRIORITY}\" -t \"${PROG}[$$]\" -- \"${msg}\"\n  echo -e \"${RED}${ds}Error [$$]: ${msg}${NC}\" \u003e\u00262\n}\n\n# The main initialization function of this library.  This should be kept to the\n# minimum amount of work required for all functions to operate cleanly.\nstdlib::init() {\n  if [[ ${STARTUP_SCRIPT_STDLIB_INITIALIZED} -gt 0 ]]; then\n    stdlib::info 'stdlib::init()'\" already initialized, no action taken.\"\n    return 0\n  fi\n  ((STARTUP_SCRIPT_STDLIB_INITIALIZED++)) || true\n  stdlib::init_global_vars\n  stdlib::init_directories\n  stdlib::debug \"stdlib::init(): startup-script-stdlib.sh initialized and ready\"\n}\n\n# Transfer control to startup-startup-script-custom.  The script is sourced to\n# ensure all functions are exposed and the trap handlers configured here are\n# fired on exit.  A local file path or http URL are both supported.\nstdlib::run_startup_script_custom() {\n  local script_file key\n  local exit_code\n  # shellcheck disable=SC2119\n  script_file=\"$(stdlib::mktemp)\"\n  key=\"instance/attributes/startup-script-custom\"\n\n  if ! stdlib::metadata_get -k \"${key}\" -o \"${script_file}\"; then\n    stdlib::error \"Could not fetch custom startup script.\" \\\n      \"Make sure ${key} exists.\"\n    return 1\n  fi\n\n  stdlib::debug \"=== BEGIN ${key} ===\"\n  # shellcheck source=/dev/null\n  source \"${script_file}\"\n  exit_code=$?\n  stdlib::debug \"=== END ${key} exit_code=${exit_code} ===\"\n  return $exit_code\n}\n\n# Initialize global variables.\nstdlib::init_global_vars() {\n  # The program name, used for logging.\n  readonly PROG=\"${PROG:-startup-script-stdlib}\"\n  # Date format used for stderr logging.  Passed to date + command.\n  readonly DATE_FMT=\"${DATE_FMT:-\"%a %b %d %H:%M:%S %z %Y\"}\"\n  # var directory\n  readonly VARDIR=\"${VARDIR:-/var/lib/startup}\"\n  # Override this with file://localhost/tmp/foo/bar in spec test context\n  readonly METADATA_BASE=\"${METADATA_BASE:-http://metadata.google.internal}\"\n\n  # Color variables\n  if [[ -n \"${COLOR:-}\" ]]; then\n    readonly NC='\\033[0m'        # no color\n    readonly RED='\\033[0;31m'    # error\n    readonly GREEN='\\033[0;32m'  # info\n    readonly BLUE='\\033[0;34m'   # debug\n  else\n    readonly NC=''\n    readonly RED=''\n    readonly GREEN=''\n    readonly BLUE=''\n  fi\n\n  return 0\n}\n\nstdlib::init_directories() {\n  if ! [[ -e \"${VARDIR}\" ]]; then\n    install -d -m 0755 -o 0 -g 0 \"${VARDIR}\"\n  fi\n}\n\n##\n# Get a metadata key.  When used without -o, this function is guaranteed to\n# produce no output on STDOUT other than the retrieved value.  This is intended\n# to support the use case of\n# FOO=\"$(stdlib::metadata_get -k instance/attributes/foo)\"\n#\n# If the requested key does not exist, the error code will be 22 and zero bytes\n# written to STDOUT.\nstdlib::metadata_get() {\n  local OPTIND opt key outfile\n  local metadata=\"${METADATA_BASE%/}/computeMetadata/v1\"\n  local exit_code\n  while getopts \":k:o:\" opt; do\n    case \"${opt}\" in\n    k) key=\"${OPTARG}\" ;;\n    o) outfile=\"${OPTARG}\" ;;\n    :)\n      stdlib::error \"Invalid option: -${OPTARG} requires an argument\"\n      stdlib::metadata_get_usage\n      return \"${E_MISSING_MANDATORY_ARG}\"\n      ;;\n    *)\n      stdlib::error \"Unknown option: -${opt}\"\n      stdlib::metadata_get_usage\n      return \"${E_UNKNOWN_ARG}\"\n      ;;\n    esac\n  done\n  local url=\"${metadata}/${key#/}\"\n\n  stdlib::debug \"Getting metadata resource url=${url}\"\n  if [[ -z \"${outfile:-}\" ]]; then\n    curl --location --silent --connect-timeout 1 --fail \\\n      -H 'Metadata-Flavor: Google' \"$url\" 2\u003e/dev/null\n    exit_code=$?\n  else\n    stdlib::cmd curl --location \\\n      --silent \\\n      --connect-timeout 1 \\\n      --fail \\\n      --output \"${outfile}\" \\\n      -H 'Metadata-Flavor: Google' \\\n      \"$url\"\n    exit_code=$?\n  fi\n  case \"${exit_code}\" in\n    22 | 37)\n      stdlib::debug \"curl exit_code=${exit_code} for url=${url}\" \\\n        \"(Does not exist)\"\n      ;;\n  esac\n  return \"${exit_code}\"\n}\n\nstdlib::metadata_get_usage() {\n  stdlib::info 'Usage: stdlib::metadata_get -k \u003ckey\u003e'\n  stdlib::info 'For example: stdlib::metadata_get -k instance/attributes/startup-config'\n}\n\n# Load configuration values in the spirit of /etc/sysconfig defaults, but from\n# metadata instead of the filesystem.\nstdlib::load_config_values() {\n  local config_file\n  local key=\"instance/attributes/startup-script-config\"\n  # shellcheck disable=SC2119\n  config_file=\"$(stdlib::mktemp)\"\n  stdlib::metadata_get -k \"${key}\" -o \"${config_file}\"\n  local status=$?\n  case \"$status\" in\n    0)\n      stdlib::debug \"SUCCESS: Configuration data sourced from $key\"\n      ;;\n    22 | 37)\n      stdlib::debug \"no configuration data loaded from $key\"\n      ;;\n    *)\n      stdlib::error \"metadata_get -k $key returned unknown status=${status}\"\n      ;;\n  esac\n  # shellcheck source=/dev/null\n  source \"${config_file}\"\n}\n\n# Run a command logging the entry and exit.  Intended for system level commands\n# and operational debugging.  Not intended for use with redirection.  This is\n# not named run() because bats uses a run() function.\nstdlib::cmd() {\n  local exit_code argv=(\"$@\")\n  stdlib::debug \"BEGIN: stdlib::cmd() command=[${argv[*]}]\"\n  \"${argv[@]}\"\n  exit_code=$?\n  stdlib::debug \"END: stdlib::cmd() command=[${argv[*]}] exit_code=${exit_code}\"\n  return $exit_code\n}\n\n# Run a command successfully or exit the program with an error.\nstdlib::run_or_die() {\n  if ! stdlib::cmd \"$@\"; then\n    stdlib::error \"stdlib::run_or_die(): exiting with exit code ${E_RUN_OR_DIE}.\"\n    exit \"${E_RUN_OR_DIE}\"\n  fi\n}\n\n# Intended to take advantage of automatic cleanup of startup script library\n# temporary files without exporting a modified TMPDIR to child processes, which\n# would cause the children to have their TMPDIR deleted out from under them.\n# shellcheck disable=SC2120\nstdlib::mktemp() {\n  TMPDIR=\"${DELETE_AT_EXIT:-${TMPDIR}}\" mktemp \"$@\"\n}\n\n# Return a nice error message if a mandatory argument is missing.\nstdlib::mandatory_argument() {\n  local OPTIND opt name flag\n  while getopts \":n:f:\" opt; do\n    case \"$opt\" in\n    n) name=\"${OPTARG}\" ;;\n    f) flag=\"${OPTARG}\" ;;\n    :)\n      stdlib::error \"Invalid argument: -${OPTARG} requires an argument to stdlib::mandatory_argument()\"\n      return \"${E_MISSING_MANDATORY_ARG}\"\n      ;;\n    *)\n      stdlib::error \"Unknown argument: -${OPTARG}\"\n      stdlib::info \"Usage: stdlib::mandatory_argument -n \u003cname\u003e -f \u003cflag\u003e\"\n      return \"${E_UNKNOWN_ARG}\"\n      ;;\n    esac\n  done\n  stdlib::error \"Invalid argument: -${flag} requires an argument to ${name}().\"\n}\n#! /bin/bash\n# Copyright 2018 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nstdlib::main() {\n  DELETE_AT_EXIT=\"$(mktemp -d)\"\n  readonly DELETE_AT_EXIT\n\n  # Initialize state required by other functions, e.g. debug()\n  stdlib::init\n  stdlib::debug \"Loaded startup-script-stdlib as an executable.\"\n\n  stdlib::load_config_values\n\n  stdlib::run_startup_script_custom\n}\n\n# if script is being executed and not sourced.\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n  stdlib::finish() {\n    [[ -d \"${DELETE_AT_EXIT:-}\" ]] \u0026\u0026 rm -rf \"${DELETE_AT_EXIT}\"\n  }\n  trap stdlib::finish EXIT\n\n  stdlib::main \"$@\"\nfi\n",
              "startup-script-custom": "#!/bin/bash\n#download puppet release\nsudo wget https://apt.puppet.com/puppet-release-bionic.deb -P /etc\n\n#add with dpkg\nsudo dpkg -i /etc/puppet-release-bionic.deb\n\n#update\nsudo apt-get update\n\n#Install Puppet-Agent\nsudo apt-get install -y puppet-agent\n\n#enable \"puppet\" CLI to be used anywhere (not just /opt/puppetlabs/bin)\nexport PATH=/opt/puppetlabs/bin:$PATH\n\necho \"*****   Installation Complteted!!   *****\"\n\necho \"Welcome to Google Compute VM Instance deployed using Terraform!!!\"\n\necho \"*****   Startup script completes!!    *****\""
            },
            "metadata_fingerprint": "4IH-_qQ4Ww0=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "puppet-slave",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.89.189.182",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/winternetuk/global/networks/default",
                "network_ip": "10.156.0.41",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/winternetuk/regions/europe-west3/subnetworks/default",
                "subnetwork_project": "winternetuk"
              }
            ],
            "project": "winternetuk",
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/winternetuk/zones/europe-west3-a/instances/puppet-slave",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-west3-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9"
        }
      ]
    }
  ]
}
